import pandas as pd
import streamlit as st
from datetime import datetime
from copy import deepcopy
from openai import OpenAI

# Cargar el API key de OpenAI desde Streamlit Secrets
client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])

# Configuraci√≥n inicial de la p√°gina
st.set_page_config(page_title="Saz√≥nBot", page_icon=":pot_of_food:")
st.title("üç≤ Saz√≥nBot")

# Mostrar mensaje de bienvenida
intro = """¬°Bienvenido a Saz√≥n Bot, el lugar donde todos tus antojos de almuerzo se hacen realidad!

Comienza a chatear con Saz√≥n Bot y descubre qu√© puedes pedir, cu√°nto cuesta y c√≥mo realizar tu pago. ¬°Estamos aqu√≠ para ayudarte a disfrutar del mejor almuerzo!."""
st.markdown(intro)

# Funci√≥n para cargar el men√∫ desde un archivo CSV
def load_menu(csv_file):
    menu = pd.read_csv(csv_file, delimiter=';')
    return menu

# Funci√≥n para cargar los distritos de reparto desde otro CSV
def load_districts(csv_file):
    districts = pd.read_csv(csv_file)
    return districts

# Funci√≥n para filtrar el men√∫ por distrito
def filter_menu_by_district(menu, district_actual):
    # Filtramos men√∫ por la columna "Distrito Disponible" y vemos que platos tienen disponibles
    return menu[menu['Distrito Disponible'].str.contains(district_actual)] 

# Funci√≥n para verificar el distrito
def verify_district(prompt, districts):
    districts=districts['Distrito'].tolist()
    for word in districts:  # Iterar sobre la lista de distritos
        if word in prompt:  # Comprobar si el distrito est√° en el texto del prompt
            return True  # Retorna el distrito encontrado
    return None

# Funci√≥n para mostrar el men√∫ en un formato m√°s amigable
def format_menu(menu):
    if menu.empty:
        return "No hay platos disponibles."
    
    formatted_menu = []
    for idx, row in menu.iterrows():
        formatted_menu.append(
            f"**{row['Plato']}**  \n{row['Descripci√≥n']}  \n**Precio:** S/{row['Precio']}"
        )
        
    return "\n\n".join(formatted_menu)

# Funci√≥n para clasificar el plato
def classify_order(prompt, menu):
    for word in prompt.split(","):
        if word in menu['Plato'].values:
            return word  # Retorna el nombre del plato encontrado
    return None

# Cargar el men√∫ y los distritos
menu = load_menu("carta.csv")
districts = load_districts("distritos.csv")

# Estado inicial del chatbot
initial_state = [
    {"role": "system", "content": "You are Saz√≥nBot. A friendly assistant helping customers with their lunch orders."},
    {
        "role": "assistant",
        "content": f"üë®‚Äçüç≥ Antes de comenzar, ¬øde d√≥nde nos visitas? Por favor, menciona tu distrito (por ejemplo: Miraflores)."
    },
]

# Inicializar la conversaci√≥n si no existe en la sesi√≥n
if "messages" not in st.session_state:
    st.session_state["messages"] = deepcopy(initial_state)
    st.session_state["district_selected"] = False  # Indica si ya se seleccion√≥ un distrito
    st.session_state["current_district"] = None  # Almacena el distrito actual

# Bot√≥n para limpiar la conversaci√≥n
clear_button = st.button("Limpiar Conversaci√≥n", key="clear")
if clear_button:
    st.session_state["messages"] = deepcopy(initial_state)
    st.session_state["district_selected"] = False
    st.session_state["current_district"] = None

# Mostrar el historial de la conversaci√≥n
for message in st.session_state.messages:
    if message["role"] == "system":
        continue
    with st.chat_message(message["role"], avatar="üç≤" if message["role"] == "assistant" else "üë§"):
        st.markdown(message["content"])

# Entrada del usuario
if user_input := st.chat_input("Escribe aqu√≠..."):
    with st.chat_message("user", avatar="üë§"):
        st.markdown(user_input)
        
    if not st.session_state["district_selected"]:
        # Verificar el distrito
        district = verify_district(user_input, districts)
        if not district:
            response = f"Lo siento, pero no entregamos en ese distrito. Estos son los distritos disponibles: {', '.join(districts)}."
        else:
            st.session_state["district_selected"] = True
            st.session_state["current_district"] = user_input
            # Filtrar el men√∫ por distrito y mostrarlo
            filtered_menu = filter_menu_by_district(menu, user_input)
            menu_display = format_menu(filtered_menu)

            response = f"Gracias por proporcionar tu distrito: **{user_input}**. Aqu√≠ est√° el men√∫ disponible para tu √°rea:\n\n{menu_display}\n\n**¬øQu√© te gustar√≠a pedir?**"
    else:       
        filtered_menu = filter_menu_by_district(menu, st.session_state["current_district"])
        order = classify_order(user_input, menu)  # Aseg√∫rate de que `classify_order` considere el men√∫ filtrado
        if not order:
            response = "üòä No has seleccionado ning√∫n plato del men√∫. Por favor revisa."
        else:
            response = f"Tu pedido ha sido registrado: **{order}**. ¬°Gracias!"
            st.session_state["last_order"] = order
    
    # Mostrar la respuesta del asistente
    with st.chat_message("assistant", avatar="üç≤"):
        st.markdown(response)
        
     # Guardar el mensaje en la sesi√≥n
    st.session_state.messages.append({"role": "user", "content": user_input})
    st.session_state.messages.append({"role": "assistant", "content": response})
