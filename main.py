import pandas as pd
import streamlit as st
from datetime import datetime
from copy import deepcopy
from openai import OpenAI

# Cargar el API key de OpenAI desde Streamlit Secrets
client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])

# Configuraci√≥n inicial de la p√°gina
st.set_page_config(page_title="Saz√≥nBot", page_icon=":pot_of_food:")
st.title("üç≤ Saz√≥nBot")

# Mostrar mensaje de bienvenida
intro = """¬°Bienvenido a Saz√≥n Bot, el lugar donde todos tus antojos de almuerzo se hacen realidad!

Comienza a chatear con Saz√≥n Bot y descubre qu√© puedes pedir, cu√°nto cuesta y c√≥mo realizar tu pago. ¬°Estamos aqu√≠ para ayudarte a disfrutar del mejor almuerzo!."""
st.markdown(intro)

# Funci√≥n para cargar el men√∫ desde un archivo CSV
def load_menu(csv_file):
    menu = pd.read_csv(csv_file)
    return menu

# Funci√≥n para cargar los distritos de reparto desde otro CSV
def load_districts(csv_file):
    districts = pd.read_csv(csv_file)
    return districts['Distrito'].tolist()

# Funci√≥n para mostrar el men√∫ al usuario
def show_menu(menu):
    st.markdown("### Men√∫ del d√≠a")
    for index, row in menu.iterrows():
        st.markdown(f"- **{row['Plato']}**: {row['Descripci√≥n']} - Precio: S/{row['Precio']}")

# Cargar men√∫ y distritos (aseg√∫rate de que los archivos CSV existen)
menu = load_menu("carta.csv")  # Archivo 'carta.csv' debe tener columnas: Plato, Descripci√≥n, Precio
districts = load_districts("distritos.csv")  # Archivo 'distritos.csv' debe tener una columna: Distrito

# Estado inicial del chatbot
initial_state = [
    {"role": "system", "content": "You are Saz√≥nBot. A friendly assistant helping customers with their lunch orders."},
    {
        "role": "assistant",
        "content": "üë®‚Äçüç≥ ¬øQu√© te puedo ofrecer?\n\n" + "\n".join([f"**{row['Plato']}** - S/{row['Precio']}" for index, row in menu.iterrows()])
    },
]

# Funci√≥n para registrar los pedidos en un archivo
def save_order(order, total_price):
    with open("orders.csv", "a") as f:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        f.write(f"{timestamp}, {order}, {total_price}\n")

# Funci√≥n para clasificar el plato y el distrito
def extract_order_info(prompt, menu, districts):
    order = None
    district = None

    # Extraer el plato
    for word in prompt.split():
        if word in menu['Plato'].values:
            order = word
            break  # Detenerse si se encuentra el plato

    # Extraer el distrito
    for district_candidate in districts:
        if district_candidate in prompt:
            district = district_candidate
            break  # Detenerse si se encuentra el distrito

    return order, district

# Funci√≥n para manejar el pedido del usuario
def handle_order(prompt, menu, districts):
    # Extraer el plato y el distrito
    order, district = extract_order_info(prompt, menu, districts)

    # Validar si se seleccion√≥ un plato
    if not order:
        return "üòä No has seleccionado ning√∫n plato del men√∫. Por favor revisa."

    # Validar si el distrito es v√°lido
    if not district:
        return f"Lo siento, pero no entregamos en ese distrito. Estos son los distritos disponibles: {', '.join(districts)}"

    # Calcular el precio total
    total_price = menu.loc[menu['Plato'] == order, 'Precio'].values[0]

    # Guardar el pedido
    save_order(order, total_price)

    # Responder con el resumen del pedido
    return f"Tu pedido ha sido registrado: {order}. El monto total es S/{total_price}. Gracias por tu compra. El pedido se enviar√° a {district}."

# Inicializar la conversaci√≥n si no existe en la sesi√≥n
if "messages" not in st.session_state:
    st.session_state["messages"] = deepcopy(initial_state)

# Bot√≥n para limpiar la conversaci√≥n
clear_button = st.button("Limpiar Conversaci√≥n", key="clear")
if clear_button:
    st.session_state["messages"] = deepcopy(initial_state)

# Mostrar el historial de la conversaci√≥n
for message in st.session_state.messages:
    if message["role"] == "system":
        continue
    elif message["role"] == "assistant":
        with st.chat_message(message["role"], avatar="üç≤"):
            st.markdown(message["content"])
    else:
        with st.chat_message(message["role"], avatar="üë§"):
            st.markdown(message["content"])

# Entrada del usuario para el pedido
if prompt := st.chat_input("¬øQu√© te gustar√≠a pedir y en qu√© distrito?"):
    with st.chat_message("user", avatar="üë§"):
        st.markdown(prompt)

    # Procesar el pedido y generar la respuesta
    response = handle_order(prompt, menu, districts)

    with st.chat_message("assistant", avatar="üç≤"):
        st.markdown(response)





